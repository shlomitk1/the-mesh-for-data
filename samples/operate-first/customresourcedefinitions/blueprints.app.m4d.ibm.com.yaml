apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: blueprints.app.m4d.ibm.com
spec:
  additionalPrinterColumns:
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  - JSONPath: .status.observedState.ready
    name: Ready
    type: string
  group: app.m4d.ibm.com
  names:
    kind: Blueprint
    listKind: BlueprintList
    plural: blueprints
    singular: blueprint
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Blueprint is the Schema for the blueprints API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: 'BlueprintSpec defines the desired state of Blueprint, which
            is the runtime environment which provides the Data Scientist''s application
            with secure and governed access to the data requested in the M4DApplication.
            The blueprint uses an "argo like" syntax which indicates the components
            and the flow of data between them as steps TODO: Add an indication of
            the communication relationships between the components'
          properties:
            entrypoint:
              type: string
            flow:
              description: DataFlow indicates the flow of the data between the components
                Currently we assume this is linear and thus use steps, but other more
                complex graphs could be defined as per how it is done in argo workflow
              properties:
                name:
                  type: string
                steps:
                  items:
                    description: FlowStep is one step indicates an instance of a module
                      in the blueprint, It includes the name of the module template
                      (spec) and the parameters received by the component instance
                      that is initiated by the orchestrator.
                    properties:
                      arguments:
                        description: Arguments are the input parameters for a specific
                          instance of a module.
                        properties:
                          copy:
                            description: CopyArgs are parameters specific to modules
                              that copy data from one data store to another.
                            properties:
                              destination:
                                description: Destination is the data store to which
                                  the data will be copied
                                properties:
                                  connection:
                                    description: Connection has the relevant details
                                      for accesing the data (url, table, ssl, etc.)
                                    type: object
                                  credentialLocation:
                                    description: 'CredentialLocation is used to obtain
                                      the credentials from the credential management
                                      system - ex: vault'
                                    type: string
                                  format:
                                    description: Format represents data format (e.g.
                                      parquet) as received from catalog connectors
                                    type: string
                                  vault:
                                    description: Holds details for retrieving credentials
                                      by the modules from Vault store.
                                    properties:
                                      address:
                                        description: Address is Vault address
                                        type: string
                                      authPath:
                                        description: AuthPath is the path to auth
                                          method i.e. kubernetes
                                        type: string
                                      role:
                                        description: Role is the Vault role used for
                                          retrieving the credentials
                                        type: string
                                      secretPath:
                                        description: SecretPath is the path of the
                                          secret holding the Credentials in Vault
                                        type: string
                                    required:
                                    - address
                                    - authPath
                                    - role
                                    - secretPath
                                    type: object
                                required:
                                - connection
                                - format
                                type: object
                              source:
                                description: Source is the where the data currently
                                  resides
                                properties:
                                  connection:
                                    description: Connection has the relevant details
                                      for accesing the data (url, table, ssl, etc.)
                                    type: object
                                  credentialLocation:
                                    description: 'CredentialLocation is used to obtain
                                      the credentials from the credential management
                                      system - ex: vault'
                                    type: string
                                  format:
                                    description: Format represents data format (e.g.
                                      parquet) as received from catalog connectors
                                    type: string
                                  vault:
                                    description: Holds details for retrieving credentials
                                      by the modules from Vault store.
                                    properties:
                                      address:
                                        description: Address is Vault address
                                        type: string
                                      authPath:
                                        description: AuthPath is the path to auth
                                          method i.e. kubernetes
                                        type: string
                                      role:
                                        description: Role is the Vault role used for
                                          retrieving the credentials
                                        type: string
                                      secretPath:
                                        description: SecretPath is the path of the
                                          secret holding the Credentials in Vault
                                        type: string
                                    required:
                                    - address
                                    - authPath
                                    - role
                                    - secretPath
                                    type: object
                                required:
                                - connection
                                - format
                                type: object
                              transformations:
                                description: Transformations are different types of
                                  processing that may be done to the data as it is
                                  copied.
                                items:
                                  type: object
                                type: array
                            required:
                            - destination
                            - source
                            type: object
                          read:
                            description: ReadArgs are parameters that are specific
                              to modules that enable an application to read data
                            items:
                              description: ReadModuleArgs define the input parameters
                                for modules that read data from location A
                              properties:
                                assetID:
                                  description: AssetID identifies the asset to be
                                    used for accessing the data when it is ready It
                                    is copied from the M4DApplication resource
                                  type: string
                                source:
                                  description: Source of the read path module
                                  properties:
                                    connection:
                                      description: Connection has the relevant details
                                        for accesing the data (url, table, ssl, etc.)
                                      type: object
                                    credentialLocation:
                                      description: 'CredentialLocation is used to
                                        obtain the credentials from the credential
                                        management system - ex: vault'
                                      type: string
                                    format:
                                      description: Format represents data format (e.g.
                                        parquet) as received from catalog connectors
                                      type: string
                                    vault:
                                      description: Holds details for retrieving credentials
                                        by the modules from Vault store.
                                      properties:
                                        address:
                                          description: Address is Vault address
                                          type: string
                                        authPath:
                                          description: AuthPath is the path to auth
                                            method i.e. kubernetes
                                          type: string
                                        role:
                                          description: Role is the Vault role used
                                            for retrieving the credentials
                                          type: string
                                        secretPath:
                                          description: SecretPath is the path of the
                                            secret holding the Credentials in Vault
                                          type: string
                                      required:
                                      - address
                                      - authPath
                                      - role
                                      - secretPath
                                      type: object
                                  required:
                                  - connection
                                  - format
                                  type: object
                                transformations:
                                  description: Transformations are different types
                                    of processing that may be done to the data
                                  items:
                                    type: object
                                  type: array
                              required:
                              - assetID
                              - source
                              type: object
                            type: array
                          write:
                            description: WriteArgs are parameters that are specific
                              to modules that enable an application to write data
                            items:
                              description: WriteModuleArgs define the input parameters
                                for modules that write data to location B
                              properties:
                                destination:
                                  description: Destination is the data store to which
                                    the data will be written
                                  properties:
                                    connection:
                                      description: Connection has the relevant details
                                        for accesing the data (url, table, ssl, etc.)
                                      type: object
                                    credentialLocation:
                                      description: 'CredentialLocation is used to
                                        obtain the credentials from the credential
                                        management system - ex: vault'
                                      type: string
                                    format:
                                      description: Format represents data format (e.g.
                                        parquet) as received from catalog connectors
                                      type: string
                                    vault:
                                      description: Holds details for retrieving credentials
                                        by the modules from Vault store.
                                      properties:
                                        address:
                                          description: Address is Vault address
                                          type: string
                                        authPath:
                                          description: AuthPath is the path to auth
                                            method i.e. kubernetes
                                          type: string
                                        role:
                                          description: Role is the Vault role used
                                            for retrieving the credentials
                                          type: string
                                        secretPath:
                                          description: SecretPath is the path of the
                                            secret holding the Credentials in Vault
                                          type: string
                                      required:
                                      - address
                                      - authPath
                                      - role
                                      - secretPath
                                      type: object
                                  required:
                                  - connection
                                  - format
                                  type: object
                                transformations:
                                  description: Transformations are different types
                                    of processing that may be done to the data as
                                    it is written.
                                  items:
                                    type: object
                                  type: array
                              required:
                              - destination
                              type: object
                            type: array
                        type: object
                      name:
                        description: Name is the name of the instance of the module.
                          For example, if the application is named "notebook" and
                          an implicitcopy module is deemed necessary.  The FlowStep
                          name would be notebook-implicitcopy.
                        type: string
                      template:
                        description: 'Template is the name of the specification in
                          the Blueprint describing how to instantiate a component
                          indicated by the module.  It is the name of a M4DModule
                          CRD. For example: implicit-copy-db2wh-to-s3-latest'
                        type: string
                    required:
                    - name
                    - template
                    type: object
                  type: array
              required:
              - name
              - steps
              type: object
            templates:
              items:
                description: ComponentTemplate is a copy of a M4DModule Custom Resource.  It
                  contains the information necessary to instantiate a component in
                  a FlowStep, which provides the functionality described by the module.  There
                  are 3 different module types.
                properties:
                  chart:
                    description: Chart contains the location of the helm chart with
                      info detailing how to deploy
                    properties:
                      name:
                        description: Name of helm chart
                        type: string
                      values:
                        additionalProperties:
                          type: string
                        description: Values to pass to helm chart installation
                        type: object
                    required:
                    - name
                    type: object
                  kind:
                    description: Kind of k8s resource
                    type: string
                  name:
                    description: Name of the template
                    type: string
                required:
                - chart
                - kind
                - name
                type: object
              type: array
          required:
          - entrypoint
          - flow
          - templates
          type: object
        status:
          description: BlueprintStatus defines the observed state of Blueprint This
            includes readiness, error message, and indicators forthe Kubernetes resources
            owned by the Blueprint for cleanup and status monitoring
          properties:
            observedGeneration:
              description: ObservedGeneration is taken from the Blueprint metadata.  This
                is used to determine during reconcile whether reconcile was called
                because the desired state changed, or whether status of the allocated
                resources should be checked.
              format: int64
              type: integer
            observedState:
              description: ObservedState includes information to be reported back
                to the M4DApplication resource It includes readiness and error indications,
                as well as user instructions
              properties:
                dataAccessInstructions:
                  description: DataAccessInstructions indicate how the data user or
                    his application may access the data. Instructions are available
                    upon successful orchestration.
                  type: string
                error:
                  description: Error indicates that there has been an error to orchestrate
                    the modules and provides the error message
                  type: string
                ready:
                  description: Ready represents that the modules have been orchestrated
                    successfully and the data is ready for usage
                  type: boolean
              type: object
            releases:
              additionalProperties:
                format: int64
                type: integer
              description: Releases map each release to the observed generation of
                the blueprint containing this release. At the end of reconcile, each
                release should be mapped to the latest blueprint version or be uninstalled.
              type: object
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ''
    plural: ''
  conditions: []
  storedVersions: []
